//import java.util.logging.Level

buildscript {

    ext.kotlin_version = '1.3.20'
    ext.kotlinx_version = '1.1.1'
    ext.slf4j_version = '1.7.25'
    ext.gson_version = '2.8.5'
    ext.rxkotlin_version = '2.3.0'
    ext.tornado_fx_version = '1.7.17'
    ext.log4j_version = '1.2.17'
    ext.jackson_xml_version = '2.9.8'
    ext.json_org_version = '20180813'
    ext.apachi_commons_lang_version = '3.4'
    ext.okhttp_version = '3.13.1'
    ext.pandonium_version = '67.0.4'
    ext.shadow_version = '4.0.2'
    
    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    
    dependencies {
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version")
//        classpath "com.github.jengelman.gradle.plugins:shadow:$shadow_version"
    }
}

apply plugin: 'kotlin'
//apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'application'

mainClassName = 'GW2StackLauncherApp'

group 'GW2StackLauncher'
version '0.0.1'

sourceCompatibility = 1.8

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

sourceSets {
    main.kotlin.srcDirs += 'src/main/kotlin'
//    main.java.srcDirs += 'src/main/kotlin'
}

repositories {
    jcenter()
    mavenCentral()
}

dependencies {
    
    // compile
//    compile("org.slf4j:slf4j-api:$slf4j_version")
//    compile("org.slf4j:slf4j-simple:$slf4j_version")
    compile("com.google.code.gson:gson:$gson_version")
    compile("com.fasterxml.jackson.dataformat:jackson-dataformat-xml:$jackson_xml_version")
    compile("no.tornado:tornadofx:$tornado_fx_version")

    compile files(
            "$rootProject.projectDir/libs/lib/jxbrowser-6.22.2.jar", 
            "$rootProject.projectDir/libs/lib/jxbrowser-win64-6.22.2.jar", 
            "$rootProject.projectDir/libs/license.jar"
    )

//    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlinx_version")
    compile("org.jetbrains.kotlin:kotlin-stdlib-jdk8")
    compile("com.squareup.okhttp3:okhttp:$okhttp_version")

    // test
    compile("org.jetbrains.kotlin:kotlin-reflect")
    testImplementation("org.jetbrains.kotlin:kotlin-test")
    testImplementation("org.jetbrains.kotlin:kotlin-test-junit")
}

task fatJar(type: Jar) {
    manifest {
        attributes 'Implementation-Title': 'GW2SL',
                'Implementation-Version': version,
                'Main-Class': mainClassName
    }
    baseName = project.name
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}
